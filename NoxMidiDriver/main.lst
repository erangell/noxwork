ca65 V2.13.3 - (C) Copyright 1998-2012 Ullrich von Bassewitz
Main file   : main.s
Current file: main.s

000000r 1               ;-----------------------------------------------------------------------------------------
000000r 1               ;  main.s
000000r 1               ;  NoxMidiDriver
000000r 1               ;
000000r 1               ;  Created by Eric Rangell on 1/2/18.
000000r 1               ;  Copyright Â© 2018 Eric Rangell for Nox Archaist. All rights reserved.
000000r 1               ;
000000r 1               ; TEST OF MOCKINGBOARD INTERRUPTS - ASSUMES MOCKINGBOARD IS IN SLOT 4
000000r 1               ;
000000r 1               ;  Build pipeline: https://github.com/jeremysrand/Apple2BuildPipeline
000000r 1               ;  Changed disk template to Prodos 2.4.1
000000r 1               ;-----------------------------------------------------------------------------------------
000000r 1               AUXBUF1     = $5600             ;beginning of 768 bytes of aux memory for double buffering disk blocks
000000r 1               AUXBUF2     = AUXBUF1 + $0100
000000r 1               AUXBUF3     = AUXBUF2 + $0100
000000r 1               ;-----------------------------------------------------------------------------------------
000000r 1               ; For testing with the game we won't have access to Prodos MLI - it will be replaced with ProRWTS
000000r 1               ;MLI         = $BF00     ;prodos machine language interface
000000r 1               ;
000000r 1               INTVECT     = $03FE     ;interrupt vector
000000r 1               ;-----------------------------------------------------------------------------------------
000000r 1  4C rr rr     main:   jmp mockinit
000003r 1  4C rr rr             jmp activateint         ; call when ready to play 512 byte buffer from aux queue
000006r 1  4C rr rr             jmp deactivateint       ; call to stop timer interrupts (pause, panic)
000009r 1               ;
000009r 1  FF 40        inttimer:   .byte $ff,$40   ;timer interrupt value - set based on tempo of song
00000Br 1  00           temporeq:   .byte $00       ;to request tempo change, populate inttimer and set to non-zero
00000Cr 1               ;
00000Cr 1  01           intdelay:   .byte $01       ;use to simulate the amount of work done in the interrupt handler
00000Dr 1               ;
00000Dr 1  01           clickon:     .byte $01       ;turn on/turn off click on interrupt
00000Er 1               ;
00000Er 1  00 00 00 00  intcount:   .byte $00,$00,$00,$00   ;number of interrupts processed
000012r 1               ;
000012r 1               ;-----------------------------------------------------------------------------------------
000012r 1               mockinit:
000012r 1  A9 FF            lda #$FF    ; init and reset 6522 chip
000014r 1  8D 03 C4         sta $C403
000017r 1  A9 07            lda #$07
000019r 1  8D 02 C4         sta $C402
00001Cr 1  60               rts
00001Dr 1               ;-----------------------------------------------------------------------------------------
00001Dr 1               deactivateint:
00001Dr 1  08               php
00001Er 1  78               sei
00001Fr 1  A9 7F            lda #$7F    ;Interrupt Enable Register: clear any existing interrupt flags that may be enabled
000021r 1  8D 0E C4         sta $C40E
000024r 1  28               plp
000025r 1  60               rts
000026r 1               ;-----------------------------------------------------------------------------------------
000026r 1               activateint:
000026r 1  08               php
000027r 1  78               sei         ;disable interrupts while setting timer
000028r 1  A9 rr            lda #<inthand
00002Ar 1  8D FE 03         sta INTVECT
00002Dr 1  A9 rr            lda #>inthand
00002Fr 1  8D FF 03         sta INTVECT+1
000032r 1  A9 40            lda #$40    ;Auxiliary Control Register: Enable IRQ output on positive transition of input signal
000034r 1  8D 0B C4         sta $C40B
000037r 1  A9 7F            lda #$7F    ;Interrupt Enable Register: clear any existing interrupt flags that may be enabled
000039r 1  8D 0E C4         sta $C40E
00003Cr 1  A9 C0            lda #$C0    ;Enable IRQ for Timer 1:
00003Er 1  8D 0D C4         sta $C40D   ;Interrupt Flag Register
000041r 1  8D 0E C4         sta $C40E   ;Interrupt Enable Register
000044r 1  AD rr rr         lda inttimer
000047r 1  8D 04 C4         sta $C404   ;Timer 1 Counter LO (Also Timer 1 Latch LO)
00004Ar 1  AD rr rr         lda inttimer+1
00004Dr 1  8D 05 C4         sta $C405   ;Timer 1 Counter HI
000050r 1  28               plp
000051r 1  58               cli         ;Ready to receive interrupts now
000052r 1  60               rts
000053r 1               ;
000053r 1               ;-----------------------------------------------------------------------------------------
000053r 1               inthand:
000053r 1  48               pha
000054r 1  8A               txa
000055r 1  48               pha
000056r 1  98               tya
000057r 1  48               pha
000058r 1  A9 7F            lda #$7F    ;Interrupt Enable Register: clear any existing interrupt flags that may be enabled
00005Ar 1  8D 0E C4         sta $C40E
00005Dr 1               ;-----------------------------------------------------------------------------------------
00005Dr 1  AD rr rr         lda clickon
000060r 1  F0 03            beq countints
000062r 1  2C 30 C0         bit $C030
000065r 1               ;
000065r 1               countints:
000065r 1  18               clc
000066r 1  AD rr rr         lda intcount
000069r 1  69 01            adc #$01
00006Br 1  8D rr rr         sta intcount
00006Er 1  AD rr rr         lda intcount+1
000071r 1  69 00            adc #$00
000073r 1  8D rr rr         sta intcount+1
000076r 1  AD rr rr         lda intcount+2
000079r 1  69 00            adc #$00
00007Br 1  8D rr rr         sta intcount+2
00007Er 1  AD rr rr         lda intcount+3
000081r 1  69 00            adc #$00
000083r 1  8D rr rr         sta intcount+3
000086r 1               ;-----------------------------------------------------------------------------------------
000086r 1  AE rr rr         ldx intdelay    ;simulate work done during the interrupt by setting intdelay
000089r 1  F0 08            beq delayend
00008Br 1               outer:
00008Br 1  A0 00            ldy #0
00008Dr 1               inner:
00008Dr 1  88               dey
00008Er 1  D0 FD            bne inner
000090r 1  CA               dex
000091r 1  D0 F8            bne outer
000093r 1               ;-----------------------------------------------------------------------------------------
000093r 1               delayend:
000093r 1  AD rr rr         lda temporeq    ;process tempo change requests (timer interrupt values)
000096r 1  F0 03            beq strtclck
000098r 1  20 rr rr         jsr tempochg
00009Br 1               strtclck:
00009Br 1  A9 C0            lda #$C0    ;Enable IRQ for Timer 1:
00009Dr 1  8D 0D C4         sta $C40D   ;Interrupt Flag Register
0000A0r 1  8D 0E C4         sta $C40E   ;Interrupt Enable register
0000A3r 1  68               pla
0000A4r 1  A8               tay
0000A5r 1  68               pla
0000A6r 1  AA               tax
0000A7r 1  68               pla
0000A8r 1  40               rti
0000A9r 1               ;-----------------------------------------------------------------------------------------
0000A9r 1               tempochg:
0000A9r 1  AD rr rr         lda inttimer+1  ; high byte of timer value
0000ACr 1  F0 0C            beq tmpodone    ; prevent high byte from being zero - you lose control of your apple
0000AEr 1  AD rr rr         lda inttimer
0000B1r 1  8D 04 C4         sta $C404       ;Timer 1 Counter LO (Also Timer 1 Latch LO)
0000B4r 1  AD rr rr         lda inttimer+1
0000B7r 1  8D 05 C4         sta $C405       ;Timer 1 Counter HI
0000BAr 1               tmpodone:
0000BAr 1  A9 00            lda #$00
0000BCr 1  8D rr rr         sta temporeq
0000BFr 1  60               rts
0000C0r 1               ;-----------------------------------------------------------------------------------------
0000C0r 1               mainend:
0000C0r 1  00               brk
0000C0r 1               
